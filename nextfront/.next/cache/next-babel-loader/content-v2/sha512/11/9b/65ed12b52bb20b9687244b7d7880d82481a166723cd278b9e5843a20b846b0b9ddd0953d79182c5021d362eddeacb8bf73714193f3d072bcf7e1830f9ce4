{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/mytimeline.component.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Cookies from 'js-cookie';\nimport { Table } from 'react-bootstrap';\n\nclass MyTimeLine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"userauth\", () => {\n      var token = Cookies.get(\"token\");\n\n      if (token != undefined) {\n        console.log(\"token======>\", token);\n        fetch('/api/userauth', {\n          method: 'POST',\n          headers: {\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify(token)\n        }).then(response => response.json()).then(response => {\n          console.log(\"token response===>\", response);\n\n          if (response.message != \"Token is invalid!\") {\n            console.log(\"userauthresponse===>\", response);\n            Cookies.set(\"id\", response.id);\n            Cookies.set(\"email\", response.email);\n            Cookies.set(\"firstname\", response.firstname);\n            Cookies.set(\"lastname\", response.lastname);\n            this.setState({\n              id: response.id\n            }, () => {\n              this.fetchTaskforId();\n            });\n          } else {\n            Cookies.remove(\"id\", {\n              path: ''\n            });\n            Cookies.remove(\"email\", {\n              path: ''\n            });\n            Cookies.remove(\"firstname\", {\n              path: ''\n            });\n            Cookies.remove(\"lastname\", {\n              path: ''\n            });\n            Cookies.remove(\"token\", {\n              path: ''\n            });\n            this.setState({\n              auth: false\n            });\n          }\n        });\n        const id = Cookies.get(\"id\");\n        console.log(\"cookiesid\", id);\n\n        if (id != null) {\n          this.setState({\n            auth: true\n          });\n        } else {\n          this.setState({\n            auth: false\n          });\n        }\n      } else {\n        this.setState({\n          auth: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"fetchTaskforId\", () => {\n      fetch(`api/status/tasks/mytimeline`, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          tasks: data\n        }, () => {\n          console.log(\"this.state\", this.state);\n        });\n      });\n    });\n\n    _defineProperty(this, \"TableData\", () => {\n      console.log(\"tablecalled\");\n      console.log(\"this.state\", this.state);\n      console.log(\"this.state.status\", this.props.statuslist);\n\n      if (this.state.tasks != null) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mx-3\",\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            responsive: true,\n            stripped: true,\n            hover: true,\n            bordered: true,\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Task Id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Tilte\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Comments\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Status Id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Task Assign Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Task Deadline\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: [this.state.tasks.yesterdaytasks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: /*#__PURE__*/_jsxDEV(\"td\", {\n                      colSpan: \"7\",\n                      style: {\n                        textAlign: \"center\"\n                      },\n                      children: \"Yesterday Tasks\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 103,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 21\n                }, this), this.state.tasks.yesterdaytasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.id\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.title\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.comments\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.statusid\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.taskassigndate\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.taskdeadline\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 120,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true) : \"\", this.state.tasks.todaytasks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: /*#__PURE__*/_jsxDEV(\"td\", {\n                      colSpan: \"7\",\n                      style: {\n                        textAlign: \"center\"\n                      },\n                      children: \"Today Tasks\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 134,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 21\n                }, this), this.state.tasks.todaytasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.id\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 144,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.title\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 145,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.comments\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 146,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.statusid\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 147,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.taskassigndate\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.taskdeadline\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true) : \"\", this.state.tasks.tommorrowtasks ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: /*#__PURE__*/_jsxDEV(\"td\", {\n                      colSpan: \"7\",\n                      style: {\n                        textAlign: \"center\"\n                      },\n                      children: \"Tommorrow Tasks\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 19\n                }, this), this.state.tasks.tommorrowtasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.id\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 172,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.title\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 173,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.comments\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.statusid\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 175,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.taskassigndate\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 177,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.taskdeadline\n                  }, task.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 23\n                }, this))]\n              }, void 0, true) : \"\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: this.state.auth ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"No Tasks Found For User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 31\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"User Login Timeout! Please Login Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 22\n          }, this)\n        }, void 0, false);\n      }\n    });\n\n    this.state = {\n      auth: null,\n      id: null,\n      tasks: null,\n      status: this.props.statuslist\n    };\n  }\n\n  componentDidMount() {\n    this.userauth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.TableData()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyTimeLine;","map":{"version":3,"sources":["/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/mytimeline.component.js"],"names":["React","Cookies","Table","MyTimeLine","Component","constructor","props","token","get","undefined","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","message","set","id","email","firstname","lastname","setState","fetchTaskforId","remove","path","auth","state","data","tasks","statuslist","yesterdaytasks","textAlign","map","task","title","comments","statusid","taskassigndate","taskdeadline","todaytasks","tommorrowtasks","status","componentDidMount","userauth","render","TableData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\nimport { Table } from 'react-bootstrap';\n\n\nclass MyTimeLine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      auth: null,\n      id: null,\n      tasks: null,\n      status: this.props.statuslist\n    }\n  }\n  userauth = () => {\n\n    var token = Cookies.get(\"token\")\n    if (token != undefined) {\n      console.log(\"token======>\", token)\n      fetch('/api/userauth',\n        {\n          method: 'POST',\n          headers: { 'Content-type': 'application/json' },\n          body: JSON.stringify(token)\n        })\n        .then(response => response.json())\n        .then(response => {\n          console.log(\"token response===>\", response)\n          if (response.message != \"Token is invalid!\") {\n            console.log(\"userauthresponse===>\", response)\n            Cookies.set(\"id\", response.id);\n            Cookies.set(\"email\", response.email);\n            Cookies.set(\"firstname\", response.firstname);\n            Cookies.set(\"lastname\", response.lastname);\n            this.setState({ id: response.id }, () => { this.fetchTaskforId() })\n          } else {\n\n            Cookies.remove(\"id\", { path: '' });\n            Cookies.remove(\"email\", { path: '' });\n            Cookies.remove(\"firstname\", { path: '' });\n            Cookies.remove(\"lastname\", { path: '' });\n            Cookies.remove(\"token\", { path: '' });\n            this.setState({ auth: false });\n          }\n\n        })\n      const id = Cookies.get(\"id\")\n      console.log(\"cookiesid\", id);\n      if (id != null) {\n        this.setState({ auth: true })\n      } else {\n        this.setState({ auth: false })\n      }\n    } else {\n      this.setState({ auth: false })\n    }\n  }\n\n\n  \n  fetchTaskforId = () => {\n    fetch(`api/status/tasks/mytimeline`, {\n      method: 'POST',\n      headers: { 'Content-type': 'application/json' },\n      body: JSON.stringify(this.state)\n    })\n      .then((response) => response.json())\n      .then(data => {\n        this.setState({ tasks: data }, () => { console.log(\"this.state\", this.state) });\n      });\n  }\n\n  componentDidMount() {\n    this.userauth();\n\n  }\n\n  TableData = () => {\n    console.log(\"tablecalled\")\n    console.log(\"this.state\", this.state)\n    console.log(\"this.state.status\", this.props.statuslist)\n    if (this.state.tasks != null) {\n      return (\n        <div className=\"mx-3\">\n          <Table responsive stripped hover bordered>\n            <thead>\n              <tr>\n                <th>Task Id</th>\n                <th>Tilte</th>\n                <th>Comments</th>\n                <th>Status Id</th>\n                <th>Task Assign Date</th>\n                <th>Task Deadline</th>\n              </tr>\n            </thead>\n            <tbody>\n\n              {this.state.tasks.yesterdaytasks ?\n                (\n                  <>\n                    <thead>\n                      <tr>\n                        <td colSpan=\"7\" style={{ textAlign: \"center\" }}>\n                          Yesterday Tasks\n                        </td>\n                      </tr>\n                    </thead>\n                    \n\n                    {this.state.tasks.yesterdaytasks.map((task) => (\n                      <tr>\n\n                        <td key={task.id}>{task.id}</td>\n                        <td key={task.id}>{task.title}</td>\n                        <td key={task.id}>{task.comments}</td>\n                        <td key={task.id}>{task.statusid}</td>\n\n                        <td key={task.id}>{task.taskassigndate}</td>\n                        <td key={task.id}>{task.taskdeadline}</td>\n\n\n                      </tr>\n                    ))}\n\n                  </>\n                ) : \"\"\n              }\n\n              {this.state.tasks.todaytasks ?\n                (\n                  <>\n                    <thead >\n                      <tr >\n                        <td colSpan=\"7\" style={{ textAlign: \"center\" }}>\n                          Today Tasks\n                        </td>\n\n                      </tr>\n                    </thead>\n                    {this.state.tasks.todaytasks.map((task) => (\n                      <tr>\n\n                        <td key={task.id}>{task.id}</td>\n                        <td key={task.id}>{task.title}</td>\n                        <td key={task.id}>{task.comments}</td>\n                        <td key={task.id}>{task.statusid}</td>\n\n                        <td key={task.id}>{task.taskassigndate}</td>\n                        <td key={task.id}>{task.taskdeadline}</td>\n\n\n                      </tr>\n                    ))}\n                  </>\n                ) : \"\"\n              }\n              {this.state.tasks.tommorrowtasks ?\n                (<>\n                  <thead>\n                    <tr>\n                      <td colSpan=\"7\" style={{ textAlign: \"center\" }}>\n                        Tommorrow Tasks\n                        </td>\n\n                    </tr>\n                  </thead>\n                  {\n                    this.state.tasks.tommorrowtasks.map((task) => (\n                      <tr>\n\n                        <td key={task.id}>{task.id}</td>\n                        <td key={task.id}>{task.title}</td>\n                        <td key={task.id}>{task.comments}</td>\n                        <td key={task.id}>{task.statusid}</td>\n\n                        <td key={task.id}>{task.taskassigndate}</td>\n                        <td key={task.id}>{task.taskdeadline}</td>\n\n\n                      </tr>\n                    ))\n                  }\n\n                </>) : \"\"\n              }\n\n\n\n            </tbody>\n\n\n\n\n\n          </Table>\n        </div >\n      )\n\n    } else {\n      return (\n        <>\n          {this.state.auth ? (<div style={{ textAlign: 'center' }}>\n            <h2>No Tasks Found For User</h2>\n          </div>) : (<div style={{ textAlign: 'center' }}>\n            <h2>User Login Timeout! Please Login Again</h2>\n          </div>)}\n        </>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.TableData()}\n      </div >\n    )\n  }\n}\n\nexport default MyTimeLine;"]},"metadata":{},"sourceType":"module"}