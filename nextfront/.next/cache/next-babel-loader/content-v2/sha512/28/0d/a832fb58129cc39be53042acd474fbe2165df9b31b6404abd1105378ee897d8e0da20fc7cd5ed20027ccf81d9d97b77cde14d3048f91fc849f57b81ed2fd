{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport SignInAndSignUpPage from \"../components/sign-in-and-sign-up.component\";\nimport Header from '../components/header.component';\nimport Cookies from 'js-cookie';\nimport '../styles/globals.css';\nimport { useRouter } from 'next/router';\nimport App from './index';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  const router = useRouter();\n  const {\n    0: auth,\n    1: setAuth\n  } = useState(false);\n  useEffect(() => {\n    var token = Cookies.get(\"token\");\n\n    if (token != undefined) {\n      console.log(\"token======>\", token);\n      fetch('http://localhost:5000/userauth', {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(token)\n      }).then(response => response.json()).then(response => {\n        console.log(\"token response===>\", response);\n\n        if (response.message != \"Token is invalid!\") {\n          Cookies.set(\"userid\", response.userid);\n          Cookies.set(\"email\", response.email);\n          Cookies.set(\"displayname\", response.displayname);\n        } else {\n          Cookies.remove(\"userid\", {\n            path: ''\n          });\n          Cookies.remove(\"email\", {\n            path: ''\n          });\n          Cookies.remove(\"displayname\", {\n            path: ''\n          });\n          Cookies.remove(\"token\", {\n            path: ''\n          }); // this.setState({ auth: false });\n\n          setAuth(false);\n        }\n      });\n      const userid = Cookies.get(\"userid\");\n      console.log(\"cookiesuserid\", userid);\n\n      if (userid != null) {\n        setAuth(true);\n      } else {\n        setAuth(false);\n      }\n    } else {\n      setAuth(false);\n    }\n\n    return /*#__PURE__*/_jsx(_Fragment, {});\n  });\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: /*#__PURE__*/_jsx(\"div\", {\n      style: {\n        marginTop: \"100\"\n      },\n      children: auth ? /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps)) : /*#__PURE__*/_jsx(App, _objectSpread({}, pageProps))\n    })\n  });\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}