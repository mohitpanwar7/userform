{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/mytimeline.component.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Cookies from 'js-cookie';\nimport { Table } from 'react-bootstrap';\n\nclass MyTimeLine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"userauth\", () => {\n      var token = Cookies.get(\"token\");\n\n      if (token != undefined) {\n        console.log(\"token======>\", token);\n        fetch('/api/userauth', {\n          method: 'POST',\n          headers: {\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify(token)\n        }).then(response => response.json()).then(response => {\n          console.log(\"token response===>\", response);\n\n          if (response.message != \"Token is invalid!\") {\n            console.log(\"userauthresponse===>\", response);\n            Cookies.set(\"id\", response.id);\n            Cookies.set(\"email\", response.email);\n            Cookies.set(\"firstname\", response.firstname);\n            Cookies.set(\"lastname\", response.lastname);\n            this.setState({\n              id: response.id\n            }, () => {\n              this.fetchTaskforId();\n            });\n          } else {\n            Cookies.remove(\"id\", {\n              path: ''\n            });\n            Cookies.remove(\"email\", {\n              path: ''\n            });\n            Cookies.remove(\"firstname\", {\n              path: ''\n            });\n            Cookies.remove(\"lastname\", {\n              path: ''\n            });\n            Cookies.remove(\"token\", {\n              path: ''\n            });\n            this.setState({\n              auth: false\n            });\n          }\n        });\n        const id = Cookies.get(\"id\");\n        console.log(\"cookiesid\", id);\n\n        if (id != null) {\n          this.setState({\n            auth: true\n          });\n        } else {\n          this.setState({\n            auth: false\n          });\n        }\n      } else {\n        this.setState({\n          auth: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"fetchTaskforId\", () => {\n      fetch(`api/status/tasks/mytimeline`, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          tasks: data\n        }, () => {\n          console.log(\"this.state\", this.state);\n        });\n      });\n    });\n\n    _defineProperty(this, \"TableData\", () => {\n      console.log(\"tablecalled\");\n      console.log(\"this.state\", this.state);\n\n      if (this.state.tasks != null) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            responsive: true,\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: this.state.tasks.colnamesfortasks.map(colnames => /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: colnames\n                }, colnames, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: () => {\n                if (this.state.tasks.yesterdaytasks) {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: \"Yesterday Tasks\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 96,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 95,\n                      columnNumber: 23\n                    }, this), this.state.tasks.yesterdaytasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.id\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 104,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.title\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 105,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.comments\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 106,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.statusid\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 107,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.assignedtoid\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 108,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.taskassigndate\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 109,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.taskdeadline\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 110,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 102,\n                      columnNumber: 25\n                    }, this))]\n                  }, void 0, true);\n                }\n\n                if (this.state.tasks.todaytasks) {\n                  return /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: \"Today Tasks\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 123,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 122,\n                      columnNumber: 23\n                    }, this), this.state.tasks.todaytasks.map(task => /*#__PURE__*/_jsxDEV(\"tr\", {\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.id\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 130,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.title\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 131,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.comments\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 132,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.statusid\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 133,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.assignedtoid\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 134,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.taskassigndate\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 135,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: task.taskdeadline\n                      }, task.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 136,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 128,\n                      columnNumber: 25\n                    }, this))]\n                  }, void 0, true);\n                }\n\n                if (this.state.tasks.tommorrowtasks) {}\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"No Tasks Found For User\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }, this);\n      }\n    });\n\n    this.state = {\n      auth: null,\n      id: null,\n      tasks: null\n    };\n  }\n\n  componentDidMount() {\n    this.userauth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.TableData()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MyTimeLine;","map":{"version":3,"sources":["/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/mytimeline.component.js"],"names":["React","Cookies","Table","MyTimeLine","Component","constructor","props","token","get","undefined","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","message","set","id","email","firstname","lastname","setState","fetchTaskforId","remove","path","auth","state","data","tasks","colnamesfortasks","map","colnames","yesterdaytasks","task","title","comments","statusid","assignedtoid","taskassigndate","taskdeadline","todaytasks","tommorrowtasks","textAlign","componentDidMount","userauth","render","TableData"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\nimport { Table } from 'react-bootstrap';\n\n\nclass MyTimeLine extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      auth: null,\n      id: null,\n      tasks: null\n    }\n  }\n  userauth = () => {\n\n    var token = Cookies.get(\"token\")\n    if (token != undefined) {\n      console.log(\"token======>\", token)\n      fetch('/api/userauth',\n        {\n          method: 'POST',\n          headers: { 'Content-type': 'application/json' },\n          body: JSON.stringify(token)\n        })\n        .then(response => response.json())\n        .then(response => {\n          console.log(\"token response===>\", response)\n          if (response.message != \"Token is invalid!\") {\n            console.log(\"userauthresponse===>\", response)\n            Cookies.set(\"id\", response.id);\n            Cookies.set(\"email\", response.email);\n            Cookies.set(\"firstname\", response.firstname);\n            Cookies.set(\"lastname\", response.lastname);\n            this.setState({ id: response.id }, () => { this.fetchTaskforId() })\n          } else {\n\n            Cookies.remove(\"id\", { path: '' });\n            Cookies.remove(\"email\", { path: '' });\n            Cookies.remove(\"firstname\", { path: '' });\n            Cookies.remove(\"lastname\", { path: '' });\n            Cookies.remove(\"token\", { path: '' });\n            this.setState({ auth: false });\n          }\n\n        })\n      const id = Cookies.get(\"id\")\n      console.log(\"cookiesid\", id);\n      if (id != null) {\n        this.setState({ auth: true })\n      } else {\n        this.setState({ auth: false })\n      }\n    } else {\n      this.setState({ auth: false })\n    }\n  }\n\n  fetchTaskforId = () => {\n    fetch(`api/status/tasks/mytimeline`, {\n      method: 'POST',\n      headers: { 'Content-type': 'application/json' },\n      body: JSON.stringify(this.state)\n    })\n      .then((response) => response.json())\n      .then(data => {\n        this.setState({ tasks: data }, () => { console.log(\"this.state\", this.state) });\n      });\n  }\n\n  componentDidMount() {\n    this.userauth();\n\n  }\n\n  TableData = () => {\n    console.log(\"tablecalled\")\n    console.log(\"this.state\", this.state)\n    if (this.state.tasks != null) {\n      return (\n        <div>\n          <Table responsive>\n            <thead>\n              <tr>\n                {this.state.tasks.colnamesfortasks.map((colnames) => (\n                  <th key={colnames}>{colnames}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {() => {\n                if (this.state.tasks.yesterdaytasks) {\n                  return (\n                    <>\n                      <thead>\n                        <tr>\n                          Yesterday Tasks\n                                            </tr>\n                      </thead>\n\n                      {this.state.tasks.yesterdaytasks.map((task) => (\n                        <tr>\n\n                          <td key={task.id}>{task.id}</td>\n                          <td key={task.id}>{task.title}</td>\n                          <td key={task.id}>{task.comments}</td>\n                          <td key={task.id}>{task.statusid}</td>\n                          <td key={task.id}>{task.assignedtoid}</td>\n                          <td key={task.id}>{task.taskassigndate}</td>\n                          <td key={task.id}>{task.taskdeadline}</td>\n\n\n                        </tr>\n                      ))}\n\n                    </>\n                  )\n                }\n                if (this.state.tasks.todaytasks) {\n                  return (\n                    <>\n                      <thead>\n                        <tr>\n                          Today Tasks\n                            </tr>\n                      </thead>\n                      {this.state.tasks.todaytasks.map((task) => (\n                        <tr>\n\n                          <td key={task.id}>{task.id}</td>\n                          <td key={task.id}>{task.title}</td>\n                          <td key={task.id}>{task.comments}</td>\n                          <td key={task.id}>{task.statusid}</td>\n                          <td key={task.id}>{task.assignedtoid}</td>\n                          <td key={task.id}>{task.taskassigndate}</td>\n                          <td key={task.id}>{task.taskdeadline}</td>\n\n\n                        </tr>\n                      ))}\n                    </>\n                  )\n                }\n                if (this.state.tasks.tommorrowtasks) {\n                  \n                }\n\n\n              }}\n            </tbody>\n\n\n\n\n\n          </Table>\n        </div >\n      )\n\n    } else {\n      return (\n        <div style={{ textAlign: 'center' }}>\n          <h2>No Tasks Found For User</h2>\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.TableData()}\n      </div >\n    )\n  }\n}\n\nexport default MyTimeLine;"]},"metadata":{},"sourceType":"module"}