{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/mytimeline.component.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Cookies from 'js-cookie';\n\nclass MyTimeLine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"userauth\", () => {\n      var token = Cookies.get(\"token\");\n\n      if (token != undefined) {\n        console.log(\"token======>\", token);\n        fetch('/api/userauth', {\n          method: 'POST',\n          headers: {\n            'Content-type': 'application/json'\n          },\n          body: JSON.stringify(token)\n        }).then(response => response.json()).then(response => {\n          console.log(\"token response===>\", response);\n\n          if (response.message != \"Token is invalid!\") {\n            console.log(\"userauthresponse===>\", response);\n            Cookies.set(\"id\", response.id);\n            Cookies.set(\"email\", response.email);\n            Cookies.set(\"firstname\", response.firstname);\n            Cookies.set(\"lastname\", response.lastname);\n            this.setState({\n              id: response.id\n            }, () => {});\n          } else {\n            Cookies.remove(\"id\", {\n              path: ''\n            });\n            Cookies.remove(\"email\", {\n              path: ''\n            });\n            Cookies.remove(\"firstname\", {\n              path: ''\n            });\n            Cookies.remove(\"lastname\", {\n              path: ''\n            });\n            Cookies.remove(\"token\", {\n              path: ''\n            });\n            this.setState({\n              auth: false\n            });\n          }\n        });\n        const id = Cookies.get(\"id\");\n        console.log(\"cookiesid\", id);\n\n        if (id != null) {\n          this.setState({\n            auth: true\n          });\n        } else {\n          this.setState({\n            auth: false\n          });\n        }\n      } else {\n        this.setState({\n          auth: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"fetchTaskforId\", () => {\n      fetch(`api/status/tasks/mytimeline`, {\n        method: 'POST',\n        headers: {\n          'Content-type': 'application/json'\n        },\n        body: JSON.stringify(this.state)\n      }).then(response => response.json()).then(data => {\n        this.setState({\n          tasks: data\n        }, () => {\n          console.log(\"this.state\", this.state);\n        });\n      });\n    });\n\n    this.state = {\n      auth: null,\n      id: null,\n      tasks: []\n    };\n  }\n\n  componentDidMount() {\n    this.userauth();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MyTimeLine;","map":{"version":3,"sources":["/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/mytimeline.component.js"],"names":["React","Cookies","MyTimeLine","Component","constructor","props","token","get","undefined","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","message","set","id","email","firstname","lastname","setState","remove","path","auth","state","data","tasks","componentDidMount","userauth","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Cookies from 'js-cookie';\n\n\n\nclass MyTimeLine extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            auth: null,\n            id:null,\n            tasks:[]\n        }\n    }\n    userauth = () => {\n\n        var token = Cookies.get(\"token\")\n        if (token != undefined) {\n            console.log(\"token======>\", token)\n            fetch('/api/userauth',\n                {\n                    method: 'POST',\n                    headers: { 'Content-type': 'application/json' },\n                    body: JSON.stringify(token)\n                })\n                .then(response => response.json())\n                .then(response => {\n                    console.log(\"token response===>\", response)\n                    if (response.message != \"Token is invalid!\") {\n                        console.log(\"userauthresponse===>\", response)\n                        Cookies.set(\"id\", response.id);\n                        Cookies.set(\"email\", response.email);\n                        Cookies.set(\"firstname\", response.firstname);\n                        Cookies.set(\"lastname\", response.lastname);\n                        this.setState({ id : response.id },()=>{})\n                    } else {\n\n                        Cookies.remove(\"id\", { path: '' });\n                        Cookies.remove(\"email\", { path: '' });\n                        Cookies.remove(\"firstname\", { path: '' });\n                        Cookies.remove(\"lastname\", { path: '' });\n                        Cookies.remove(\"token\", { path: '' });\n                        this.setState({ auth: false });\n                    }\n\n                })\n            const id = Cookies.get(\"id\")\n            console.log(\"cookiesid\", id);\n            if (id != null) {\n                this.setState({ auth: true })\n            } else {\n                this.setState({ auth: false })\n            }\n        } else {\n            this.setState({ auth: false })\n        }\n    }\n\n    fetchTaskforId = () => {\n        fetch(`api/status/tasks/mytimeline`,{\n            method: 'POST',\n            headers: { 'Content-type': 'application/json' },\n            body: JSON.stringify(this.state)\n        })\n            .then((response) => response.json())\n            .then(data => {\n                this.setState({ tasks: data },()=>{console.log(\"this.state\",this.state)});\n            });\n    }\n\n    componentDidMount() {\n        this.userauth();\n        \n    }\n\n    render() {\n\n        return (\n            <div>\n                \n            </div >\n        )\n    }\n}\n\nexport default MyTimeLine;"]},"metadata":{},"sourceType":"module"}