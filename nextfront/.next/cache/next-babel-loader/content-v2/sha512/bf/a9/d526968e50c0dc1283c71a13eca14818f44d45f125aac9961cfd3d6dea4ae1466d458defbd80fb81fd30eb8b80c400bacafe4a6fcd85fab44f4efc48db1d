{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/selectstate.component.js\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport styles from '../styles/selectstate.module.css';\n\nclass CountryStateSelection extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"statefetch\", countryid => {\n      fetch(`http://localhost:5000/country/${countryid}`).then(response => response.json()).then(data => {\n        this.setState({\n          states: data\n        });\n        console.log(\"states :: \", data);\n      });\n    });\n\n    this.state = {\n      states: []\n    };\n  }\n\n  statedown(value) {\n    this.props.countryOptionHandler(value);\n    console.log(\"statedown --> \", value); // this.statefetch(value);\n\n    if (value === \"India\") {\n      this.statefetch(1);\n      console.log(\"this.state\", this.state.states);\n    } else if (value === \"Usa\") {\n      this.statefetch(2);\n    }\n  } //         try {\n  //             const response = await fetch(`http://localhost:5000/country/${countryid}`, {\n  //                 method: 'GET',\n  //             });\n  //             this.statelist = await response.json();\n  //             return statelist\n  //         } catch (error) {\n  //             console.error(error);\n  //         }\n  // statedown = async (props) => {\n  //     \n  //     const { country, state } = this.props.statedata;\n  //     let options = null;\n  //     if (country === \"India\") {\n  //         // type = India;\n  //         this.statefetch(1);\n  //         console.log(\"this.state\",this.state.states)\n  //     } else if (country === \"Usa\") {\n  //         this.statefetch(2);\n  //     } else if (country === \"Other Country\") {\n  //     }\n  //     if (country) {\n  //         console.log(\"done\")\n  //         options = await this.state.states.map((key) => <option key={key}>{key}</option>);\n  //         this.setState({ options: options })\n  //         console.log(\"options state\", options)\n  //     }\n  // }\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.statediv} row mx-0`,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Country\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"select\",\n          onChange: e => this.statedown(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"---Select Country---\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"India\",\n            children: \"India\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"Usa\",\n            children: \"Usa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"col-md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"State\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"select\",\n          onChange: this.props.stateOptionHandler,\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"---Select State---\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 33\n          }, this), this.state.states.map(state => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: [[state.statename], [state.id]],\n            children: state.statename\n          }, state.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\n;\nexport default CountryStateSelection;","map":{"version":3,"sources":["/home/trex/Desktop/practiceapp/personaldetailsfull/nextfront/components/selectstate.component.js"],"names":["React","Form","styles","CountryStateSelection","Component","constructor","props","countryid","fetch","then","response","json","data","setState","states","console","log","state","statedown","value","countryOptionHandler","statefetch","render","statediv","e","target","stateOptionHandler","map","statename","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Form } from 'react-bootstrap';\nimport styles from '../styles/selectstate.module.css';\n\nclass CountryStateSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            states: [],\n        }\n    };\n\n    // componentDidMount() {\n    //     fetch(`http://localhost:5000/country/1`)\n    //         .then((response) => response.json())\n    //         .then(data => {\n    //             this.setState({ states: data });\n    //         });\n    // }\n\n    statefetch = (countryid) => {\n        fetch(`http://localhost:5000/country/${countryid}`)\n            .then((response) => response.json())\n            .then(data => {\n                this.setState({ states: data });\n                console.log(\"states :: \", data)\n            });\n\n    }\n\n    statedown(value) {\n        this.props.countryOptionHandler(value)\n        console.log(\"statedown --> \", value)\n\n        // this.statefetch(value);\n\n        if (value === \"India\") {\n\n            this.statefetch(1);\n            console.log(\"this.state\", this.state.states)\n        } else if (value === \"Usa\") {\n            this.statefetch(2);\n        }\n    }\n    //         try {\n    //             const response = await fetch(`http://localhost:5000/country/${countryid}`, {\n    //                 method: 'GET',\n\n    //             });\n    //             this.statelist = await response.json();\n    //             return statelist\n\n    //         } catch (error) {\n    //             console.error(error);\n    //         }\n\n\n\n    // statedown = async (props) => {\n    //     \n\n    //     const { country, state } = this.props.statedata;\n\n    //     let options = null;\n\n    //     if (country === \"India\") {\n    //         // type = India;\n\n    //         this.statefetch(1);\n    //         console.log(\"this.state\",this.state.states)\n\n\n\n    //     } else if (country === \"Usa\") {\n    //         this.statefetch(2);\n\n    //     } else if (country === \"Other Country\") {\n\n    //     }\n\n    //     if (country) {\n    //         console.log(\"done\")\n    //         options = await this.state.states.map((key) => <option key={key}>{key}</option>);\n\n    //         this.setState({ options: options })\n    //         console.log(\"options state\", options)\n    //     }\n    // }\n\n\n\n    render() {\n        return (\n            \n\n\n                    <div className={`${styles.statediv} row mx-0`}  >\n                        <Form.Group className=\"col-md-6\">\n                            <Form.Label>Country</Form.Label>\n                            <Form.Control as=\"select\" onChange={(e) => this.statedown(e.target.value)} required>\n                                <option value=''>---Select Country---</option>\n                                <option value=\"India\">India</option>\n                                <option value=\"Usa\">Usa</option>\n                            </Form.Control>\n                        </Form.Group>\n                        <Form.Group className=\"col-md-6\">\n                            <Form.Label>State</Form.Label>\n                            <Form.Control as=\"select\" onChange={this.props.stateOptionHandler} required>\n                                <option value=\"\">---Select State---</option>\n                                {this.state.states.map(state => (\n                                    <option key={state.id} value={[[state.statename], [state.id]]}>{state.statename}</option>\n                                ))}\n                            </Form.Control>\n                        </Form.Group>\n                    </div>\n             \n        )\n    }\n};\n\nexport default CountryStateSelection;"]},"metadata":{},"sourceType":"module"}